// Functions ------------------------------------------------------------------

// Strip-units ----------------------------------------------------------------
//
// Converts any typed variable to a regular integer
//
// $number: 	The value you want to unify

@function strip ($number) {
	@return $number / ($number * 0 + 1);
}

// Em -------------------------------------------------------------------------
//
// Converts a target value to em's, based on a context
//
// $target: 	The target integer
// $context: 	Base for conversion, defaults to $doc-em-factor

@function em ($target, $context: $base-font-size) {

	$context: strip($context);
	$target: strip($target);
	
	@return ($target/$context)*1em;
}

// Rem ------------------------------------------------------------------------
//
// Converts a target value to rem's
//
// $target: 	The target integer

@function rem ($target, $context: $base-font-size) {

	$context: strip($context);
	$target: strip($target);
	
	@return ($target/$context)*1rem;
}

// Tint -----------------------------------------------------------------------
//
// Add percentage of white to a color
// Taken from Bourbon source

@function tint ($color, $percent) {
	@return mix(white, $color, $percent);
}

// Shade ----------------------------------------------------------------------
//
// Add percentage of black to a color
// Taken from Bourbon source

@function shade ($color, $percent) {
	@return mix(black, $color, $percent);
}

// Placeholder getter/setter --------------------------------------------------
// 
// Used by the dynamic extend mixin
// Taken from Toolkit by Team Sass
// https://github.com/team-sass/toolkit

$Private-Toolkit-Placeholders: ();

@function toolkit-placeholder-set ($id) {
	$unique-id: unique-id();
	$Private-Toolkit-Placeholders: map-merge($Private-Toolkit-Placeholders, ($id: $unique-id)) !global;
	@return $unique-id;
}

@function toolkit-placeholder-get ($id) {
	@return map-get($Private-Toolkit-Placeholders, $id);
}
